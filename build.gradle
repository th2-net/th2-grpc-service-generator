plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
    id 'org.jetbrains.kotlin.jvm' version "1.6.21"
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id "org.owasp.dependencycheck" version "8.2.1"
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:4.4.0-update-libs-5345334944-c71fdc9-SNAPSHOT')

    // Grpc and Protobuf
    api "com.google.protobuf:protobuf-java-util"
    api "io.grpc:grpc-stub"

    implementation "com.google.protobuf:protobuf-java"

    implementation "org.slf4j:slf4j-api"

    //Kotlin
    implementation 'io.github.microutils:kotlin-logging:3.0.0' // The last version bases on kotlin 1.6.0

    //For generation java code. License: Apache 2.0
    implementation "com.squareup:javapoet:1.13.0"

    implementation "commons-io:commons-io"

    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
}

manifest {
    attributes(
            'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
            'Specification-Title': '',
            'Specification-Vendor': 'Exactpro Systems LLC',
            'Implementation-Title': project.archivesBaseName,
            'Implementation-Vendor': 'Exactpro Systems LLC',
            'Implementation-Vendor-Id': 'com.exactpro',
            'Implementation-Version': project.version
    )
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    (options as StandardJavadocDocletOptions).addBooleanOption("html5", true)
}

// conditionals for publications
tasks.withType(PublishToMavenRepository).configureEach {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword'))
    }
}
tasks.withType(Sign).configureEach {
    onlyIf {
        project.hasProperty('signingKey') &&
                project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.configureEach { task ->
    if (task.name == 'initializeSonatypeStagingRepository' &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            artifact("$buildDir/artifacts/${project.name}" as File) {
                classifier "all"
                extension "jar"
                builtBy shadowJar
            }
            pom {
                name = rootProject.name
                packaging = 'jar'
                description = rootProject.description
                url = vcs_url
                scm {
                    url = vcs_url
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developer'
                        name = 'developer'
                        email = 'developer@exactpro.com'
                    }
                }
                scm {
                    url = vcs_url
                }
            }
        }
    }
    repositories {
        //Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

mainClassName = "com.exactpro.th2.service.generator.protoc.Main"

shadowJar {
    mergeServiceFiles()

    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }

    archiveFileName = project.name
    destinationDirectory = "$buildDir/artifacts" as File
}

dependencyLocking {
    lockAllConfigurations()
}

dependencyCheck {
    formats = ['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS = 5
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}
