plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'org.jetbrains.kotlin.jvm' version "1.3.72"
    id 'com.github.johnrengelman.shadow' version '4.0.2'
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

ext {
    grpcVersion         = '1.32.1'
    protobufVersion     = '3.13.0'
    kotlin_version      = '1.3.72'
    slf4j_version       = '1.7.26'
    sharedDir           = file("${project.rootDir}/shared")
}

repositories {
    mavenCentral()
    maven {
        name 'Bintray'
        url 'https://dl.bintray.com/exactpro/th2'
    }
    maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:2.10.1')

    // Grpc and Protobuf
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    api "com.google.protobuf:protobuf-java-util"
    api "io.grpc:grpc-stub"
    
    implementation "org.slf4j:slf4j-api"
    
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    //For generation java code. License: Apache 2.0
    implementation "com.squareup:javapoet:1.13.0"
    
    implementation "commons-io:commons-io:2.8.0"

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

manifest {
    attributes(
            'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
            'Specification-Title':      '',
            'Specification-Vendor':     'Exactpro Systems LLC',
            'Implementation-Title':     project.archivesBaseName,
            'Implementation-Vendor':    'Exactpro Systems LLC',
            'Implementation-Vendor-Id': 'com.exactpro',
            'Implementation-Version':   project.version
    )
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    (options as StandardJavadocDocletOptions).addBooleanOption("html5", true)
}

// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexusRepository &&
            project.hasProperty('nexus_user') &&
            project.hasProperty('nexus_password') &&
            project.hasProperty('nexus_url')) ||
        (repository == publishing.repositories.sonatype &&
            project.hasProperty('sonatypeUsername') &&
            project.hasProperty('sonatypePassword')) ||
        (repository == publishing.repositories.localRepo)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
        project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
        !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
              name = rootProject.name
              packaging = 'jar'
              description = rootProject.description
              url = vcs_url
              scm {
                url = vcs_url
              }
              licenses {
                license {
                  name = 'The Apache License, Version 2.0'
                  url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
              }
              developers {
                developer {
                  id = 'developer'
                  name = 'developer'
                  email = 'developer@exactpro.com'
                }
              }
              scm {
                url = vcs_url
              }
            }
        }
    }
    repositories {
        maven {
            name = 'localRepo'
            url = sharedDir
        }
//Nexus repo to publish from gitlab
        maven {
            name = 'nexusRepository'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

mainClassName = "com.exactpro.th2.service.generator.protoc.Main"

shadowJar {
    mergeServiceFiles()

    manifest {
        attributes(
                'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title':      '',
                'Specification-Vendor':     'Exactpro Systems LLC',
                'Implementation-Title':     project.archivesBaseName,
                'Implementation-Vendor':    'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version':   project.version
        )
    }
    
    archiveFileName = project.name
    destinationDirectory = "$buildDir/artifacts" as File
}

