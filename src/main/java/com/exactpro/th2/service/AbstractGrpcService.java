/*
 * Copyright 2020-2023 Exactpro (Exactpro Systems Limited)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.exactpro.th2.service;

import com.google.protobuf.Message;
import io.grpc.CallOptions;
import io.grpc.Channel;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import io.grpc.stub.AbstractStub;
import io.grpc.stub.StreamObserver;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.concurrent.NotThreadSafe;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static java.util.Collections.emptyMap;
import static java.util.Objects.requireNonNull;

public abstract class AbstractGrpcService<S extends AbstractStub<S>> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractGrpcService.class);
    /**
     * This status description is generated by the code in the grpc-netty:1.56.0<br>
     * io.grpc.netty.NettyClientHandler.onRstStreamRead@407<br>
     * io.grpc.netty.NettyClientHandler.onRstStreamRead@942<br>
     * {@link io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder}.FrameReadListener.onRstStreamRead@442<br>
     * {@link io.netty.handler.codec.http2.Http2InboundFrameLogger}$1.onRstStreamRead@80<br>
     * {@link io.netty.handler.codec.http2.DefaultHttp2FrameReader}.readRstStreamFrame@509
     */
    public static final String STATUS_DESCRIPTION_OF_INTERRUPTED_REQUEST = "RST_STREAM closed stream. HTTP/2 error code: CANCEL";
    public static final String ROOT_RETRY_SYNC_EXCEPTION_MESSAGE = "Can not execute GRPC blocking request";
    private final RetryPolicy retryPolicy;
    private final StubStorage<S> stubStorage;

    public AbstractGrpcService() {
        retryPolicy = null;
        stubStorage = null;
    }

    public AbstractGrpcService(@NotNull RetryPolicy retryPolicy, @NotNull StubStorage<S> stubStorage) {
        this.retryPolicy = requireNonNull(retryPolicy, "Retry policy can not be null");
        this.stubStorage = requireNonNull(stubStorage, "Service configuration can not be null");
    }

    protected <T> T createBlockingRequest(Supplier<T> method) {
        return executeWithRetrySync(method);
    }

    protected <T> Iterator<T> createBlockingServerStreamingRequest(Supplier<Iterator<T>> method) {
        return new RetryIterator<>(method);
    }

    protected <T> void createAsyncRequest(StreamObserver<T> observer,  Consumer<StreamObserver<T>> method) {
        if (retryPolicy == null || stubStorage == null) {
            throw new IllegalStateException("Not yet init");
        }

        method.accept(new RetryStreamObserver<>(observer, method));
    }

    protected abstract S createStub(Channel channel, CallOptions callOptions);

    @Deprecated(since = "3.2.0")
    // This method is left for backward compatibility
    protected S getStub(Message message) {
        return getStub(message, emptyMap());
    }

    protected S getStub(Message message, Map<String, String> properties) {
        return requireNonNull(stubStorage, "'Stubs storage' can't be null")
                .getStub(message, this::createStub, properties);
    }

    private <T> T executeWithRetrySync(Supplier<T> firstCall, Supplier<T> retryCall, Consumer<StatusRuntimeException> checkRetryPermission) {
        try {
            return firstCall.get();
        } catch (StatusRuntimeException firstException) {
            checkRetryPermission.accept(firstException);
            if (retryPolicy == null) {
                IllegalStateException exception = new IllegalStateException("Not yet init");
                exception.addSuppressed(firstException);
                throw exception;
            }
            RuntimeException retryRootException = new RuntimeException(ROOT_RETRY_SYNC_EXCEPTION_MESSAGE);
            handleStatusRuntimeException(retryPolicy, retryRootException, firstException, 0);

            for (int attempt = 1; attempt <= retryPolicy.getMaxAttempts(); attempt++) {
                try {
                    Thread.sleep(retryPolicy.getDelay(attempt - 1));
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    retryRootException.addSuppressed(e);
                    throw retryRootException;
                }

                try {
                    return retryCall.get();
                } catch (StatusRuntimeException e) {
                    handleStatusRuntimeException(retryPolicy, retryRootException, e, attempt);
                } catch (Exception e) {
                    retryRootException.addSuppressed(e);
                    throw retryRootException;
                }
            }

            throw retryRootException;
        } catch (RuntimeException e) {
            throw new RuntimeException(ROOT_RETRY_SYNC_EXCEPTION_MESSAGE, e);
        }
    }

    private <T> T executeWithRetrySync(Supplier<T> call) {
        return executeWithRetrySync(call, call, Function.identity()::apply);
    }

    private void handleStatusRuntimeException(@NotNull RetryPolicy retryPolicy,
                                              @NotNull RuntimeException retryRootExp,
                                              @NotNull StatusRuntimeException grpcExp,
                                              int attempt) {
        retryRootExp.addSuppressed(grpcExp);
        Status.Code statusCode = grpcExp.getStatus().getCode();
        switch (statusCode) {
            case UNKNOWN:
            case DEADLINE_EXCEEDED:
                throw retryRootExp;
            case CANCELLED:
                if (retryPolicy.retryInterruptedTransaction()
                        && STATUS_DESCRIPTION_OF_INTERRUPTED_REQUEST.equals(grpcExp.getStatus().getDescription())) {
                    LOGGER.warn("GRPC blocking request has been interrupted during handle");
                } else {
                    throw retryRootExp;
                }
        }
        LOGGER.warn("Can not send GRPC blocking request. Retrying. Current attempt = {}", attempt, grpcExp);
    }
    @NotThreadSafe
    private class RetryIterator<T> implements Iterator<T> {
        private final Supplier<Iterator<T>> method;
        private Iterator<T> internal;
        private boolean hasResponse = false;

        public RetryIterator(Supplier<Iterator<T>> method) {
            this.method = method;
            this.internal = method.get();
        }

        @Override
        public boolean hasNext() {
            boolean result = executeWithRetrySync(internal::hasNext, this::retryHasNext, this::checkRetryPermission);
            hasResponse = true;
            return result;
        }

        @Override
        public T next() {
            T result = executeWithRetrySync(internal::next, this::retryNext, this::checkRetryPermission);
            hasResponse = true;
            return result;
        }

        private void checkRetryPermission(StatusRuntimeException e) {
            if (hasResponse) {
                throw new IllegalStateException("Request failures mid-transfer", e);
            }
        }
        private boolean retryHasNext() {
            internal = method.get();
            return internal.hasNext();
        }

        private T retryNext() {
            internal = method.get();
            return internal.next();
        }
    }

    private class RetryStreamObserver<T> implements StreamObserver<T> {

        private final StreamObserver<T> delegate;
        private final Consumer<StreamObserver<T>> method;
        private final AtomicInteger currentAttempt = new AtomicInteger(0);

        public RetryStreamObserver(StreamObserver<T> delegate, Consumer<StreamObserver<T>> method) {
            this.delegate = delegate;
            this.method = method;
        }

        @Override
        public void onNext(T value) {
            delegate.onNext(value);
        }

        @Override
        public void onError(Throwable t) {
            requireNonNull(retryPolicy, "'Retry policy' can't be null");
            int attempt = currentAttempt.getAndIncrement();
            if (attempt < retryPolicy.getMaxAttempts() && t instanceof StatusRuntimeException) {

                Status status = ((StatusRuntimeException) t).getStatus();
                Status.Code statusCode = status.getCode();
                switch (statusCode) {
                    case UNKNOWN:
                    case DEADLINE_EXCEEDED:
                        delegate.onError(t);
                        break;
                    case CANCELLED:
                        if (retryPolicy.retryInterruptedTransaction()
                                && STATUS_DESCRIPTION_OF_INTERRUPTED_REQUEST.equals(status.getDescription())) {
                            LOGGER.warn("GRPC blocking request has been interrupted during handle");
                            method.accept(this);
                        } else {
                            delegate.onError(t);
                        }
                        break;
                    default:
                        LOGGER.warn("Can not send GRPC async request. Retrying. Current attempt = {}", currentAttempt.get() + 1, t);

                        try {
                            Thread.sleep(retryPolicy.getDelay(attempt));
                            method.accept(this);
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            delegate.onError(t);
                        }
                        break;
                }
            } else {
                delegate.onError(t);
            }
        }

        @Override
        public void onCompleted() {
            delegate.onCompleted();
        }
    }

}